# ==============================================
# Docker Compose for Production Environment
# ==============================================

version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: agent-flow-app-prod
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - ./logs:/app/logs
      - /etc/ssl/certs:/etc/ssl/certs:ro
    networks:
      - agent-flow-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agent-flow-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/ssl:/etc/ssl/private:ro
      - ./uploads:/var/www/uploads:ro
    networks:
      - agent-flow-network
    depends_on:
      - app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database (External in production)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: agent-flow-postgres-prod
  #   restart: always
  #   environment:
  #     POSTGRES_DB: ${DATABASE_NAME}
  #     POSTGRES_USER: ${DATABASE_USERNAME}
  #     POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - agent-flow-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '2.0'
  #         memory: 2G
  #       reservations:
  #         cpus: '1.0'
  #         memory: 1G

  # Redis Cache (External in production)
  # redis:
  #   image: redis:7-alpine
  #   container_name: agent-flow-redis-prod
  #   restart: always
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - agent-flow-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 512M
  #       reservations:
  #         cpus: '0.25'
  #         memory: 256M

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-flow-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agent-flow-network

  # Grafana for monitoring dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agent-flow-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - agent-flow-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agent-flow-network:
    driver: bridge